include ../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs Mouse Sample01

block content
	h1 ドラッグでオブジェクトを回転

	mixin list(1)

	div#canvas

	include ../inc/_script-sets.jade
	script.
		window.addEventListener("DOMContentLoaded", function(){
			var camera,scene,cubeMesh,renderer;
			var canvas = document.getElementById("canvas");

			init();
			render();

			function init(){
				/*
				 * カメラを用意
				*/
				var width  = canvas.clientWidth,
						height = window.innerHeight,
						fov    = 45,
						aspect = width / height,
						near   = 1,
						far    = 1000;
						
				camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
				camera.position.set(0, 0, 500);
				camera.up.set(0, 0, 1);
				camera.lookAt(new THREE.Vector3(0, 0, 0));

				/* 
				 *シーンの準備
				*/
				scene = new THREE.Scene();

				/*
				 * メッシュを作成
				*/

				// ジオメトリーの作成
				// THREE.BoxGeometry(横幅, 高さ, 奥行き, (横の分割数, 縦の分割数, 奥行きの分割数, 表面, sides));
				var geometry = new THREE.BoxGeometry(100, 100, 100);

				// マテリアルの作成
				// THREE.MeshLambertMaterial({object});
				var material = new THREE.MeshLambertMaterial({color: 0x660000});

				// メッシュの作成
				cubeMesh = new THREE.Mesh(geometry, material);
				cubeMesh.rotation.x = 2;


				/*
				 * メッシュをシーンに追加
				*/
				scene.add(cubeMesh);

				/*
				 * 光源の作成
				*/
				var directionalLight = new THREE.DirectionalLight(0xffffff, 3);
				directionalLight.position.z = 3;
				scene.add(directionalLight);

				/* レンダラーを用意
				 * 実際に描画を行うための処理
				*/
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				canvas.appendChild( renderer.domElement );
				renderer.render(scene, camera);
			}

			function render(){
				renderer.render(scene, camera);
			}

			var posi,rotationFlag;
			/**
			 * mousedownイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mousedown", function(e){
				rotationFlag = true;// 回転フラグ
				posi = {x: e.pageX, y: e.pageY};// mousedown開始位置
			});
			/**
			 * mousemoveイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mousemove", function(e){
				if(!rotationFlag) return;// 回転フラグがtrueでなければ停止
				var rotationX,rotationY;
				rotationX = posi.x - e.pageX;// x軸の回転値
				rotationY = posi.y - e.pageY;// y軸の回転値
				cubeMesh.rotation.x += rotationX * 0.0005;
				cubeMesh.rotation.y += rotationY * 0.0005;
				render();// レンダリング
			});
			/**
			 * mouseupイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mouseup", function(e){
				rotationFlag = false;// 回転フラグをfalseに変更
			});
		});

	:markdown
		### 実装
		基本は(ベース)[../index.html]と同じ

		---

		### マウスイベント
		#### mousedown
		```
		/**
		 * mousedownイベント
		 * @return undefined
		*/
		renderer.domElement.addEventListener("mousedown", function(e){
			rotationFlag = true;// 回転フラグ
			posi = {x: e.pageX, y: e.pageY};// mousedown開始位置
		});
		```

		#### mousemove
		```
		/**
		 * mousemoveイベント
		 * @return undefined
		*/
		renderer.domElement.addEventListener("mousemove", function(e){
			if(!rotationFlag) return;// 回転フラグがtrueでなければ停止
			var rotationX,rotationY;
			rotationX = e.pageX - posi.x;// x軸の回転値
			rotationY = e.pageY - posi.y;// y軸の回転値
			cubeMesh.rotation.x += rotationX * 0.0005;
			cubeMesh.rotation.y += rotationY * 0.0005;
			render();// レンダリング
		});
		```

		#### mouseup
		```
		/**
		 * mouseupイベント
		 * @return undefined
		*/
		renderer.domElement.addEventListener("mouseup", function(e){
			rotationFlag = false;// 回転フラグをfalseに変更
		});
		```

		---

		### All Codes
		```
		window.addEventListener("DOMContentLoaded", function(){
			var camera,scene,cubeMesh,renderer;
			var canvas = document.getElementById("canvas");

			init();
			render();

			function init(){
				/*
				 * カメラを用意
				*/
				var width  = canvas.clientWidth,
						height = window.innerHeight,
						fov    = 45,
						aspect = width / height,
						near   = 1,
						far    = 1000;
						
				camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
				camera.position.set(0, 0, 500);
				camera.up.set(0, 0, 1);
				camera.lookAt(new THREE.Vector3(0, 0, 0));

				/* 
				 *シーンの準備
				*/
				scene = new THREE.Scene();

				/*
				 * メッシュを作成
				*/

				// ジオメトリーの作成
				// THREE.BoxGeometry(横幅, 高さ, 奥行き, (横の分割数, 縦の分割数, 奥行きの分割数, 表面, sides));
				var geometry = new THREE.BoxGeometry(100, 100, 100);

				// マテリアルの作成
				// THREE.MeshLambertMaterial({object});
				var material = new THREE.MeshLambertMaterial({color: 0x660000});

				// メッシュの作成
				cubeMesh = new THREE.Mesh(geometry, material);
				cubeMesh.rotation.x = 2;


				/*
				 * メッシュをシーンに追加
				*/
				scene.add(cubeMesh);

				/*
				 * 光源の作成
				*/
				var directionalLight = new THREE.DirectionalLight(0xffffff, 3);
				directionalLight.position.z = 3;
				scene.add(directionalLight);

				/* レンダラーを用意
				 * 実際に描画を行うための処理
				*/
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				canvas.appendChild( renderer.domElement );
				renderer.render(scene, camera);
			}

			function render(){
				renderer.render(scene, camera);
			}

			var posi,rotationFlag;
			/**
			 * mousedownイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mousedown", function(e){
				rotationFlag = true;// 回転フラグ
				posi = {x: e.pageX, y: e.pageY};// mousedown開始位置
			});
			/**
			 * mousemoveイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mousemove", function(e){
				if(!rotationFlag) return;// 回転フラグがtrueでなければ停止
				var rotationX,rotationY;
				rotationX = posi.x - e.pageX;// x軸の回転値
				rotationY = e.pageY - posi.y;// y軸の回転値
				cubeMesh.rotation.x += rotationX * 0.0005;
				cubeMesh.rotation.y += rotationY * 0.0005;
				render();// レンダリング
			});
			/**
			 * mouseupイベント
			 * @return undefined
			*/
			renderer.domElement.addEventListener("mouseup", function(e){
				rotationFlag = false;// 回転フラグをfalseに変更
			});
		});
		```