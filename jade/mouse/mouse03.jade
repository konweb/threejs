include ../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs Mouse Sample03

block content
	h1 OrbitControls.jsを使ってマウスコントロール

	mixin list(1)

	div#canvas

	include ../inc/_script-sets.jade
	script.
		window.addEventListener("DOMContentLoaded", function(){
			var requestAnimationFrame = window.requestAnimationFrame ||
																	window.mozRequestAnimationFrame ||
																	window.webkitRequestAnimationFrame ||
																	window.msRequestAnimationFrame;
			window.requestAnimationFrame = requestAnimationFrame;

			var camera,controls,scene,cubeMesh,renderer,controls;
			var canvas = document.getElementById("canvas");

			init();
			animate();

			function init(){
				// カメラを用意
				var geometry,material,pointLight,lighthelper,
						width  = canvas.clientWidth,
						height = window.innerHeight;
						
				camera = new THREE.PerspectiveCamera(45, width/height, 1, 2000);
				camera.position.set(0, 0, 100);

				// シーンの準備
				scene = new THREE.Scene();

				controls = new THREE.OrbitControls(camera, canvas);
				controls.addEventListener("change", render);

				// ジオメトリーの作成
				geometry = new THREE.BoxGeometry(10, 10, 10);

				// マテリアルの作成
				material = new THREE.MeshLambertMaterial({color: 0x660000});

				// メッシュの作成
				cubeMesh = new THREE.Mesh(geometry, material);
				cubeMesh.rotation.x = 2;
				scene.add(cubeMesh);

				// 光源の作成
				pointLight = new THREE.PointLight(0xffffff, 2, 0);
				pointLight.position.set(10, 10, 30);
				scene.add(pointLight);
				lighthelper = new THREE.PointLightHelper(pointLight, 1);
				scene.add(lighthelper);

				// レンダラーを用意
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				canvas.appendChild( renderer.domElement );
				renderer.render(scene, camera);
			}

			function animate(){
				requestAnimationFrame(animate);
				controls.update();
			}

			function render(){
				renderer.render(scene, camera);
			}
		});

	:markdown
		## 実装
		基本は[TrackballControls.js](./mouse02.html)と同じ

		---

		### マウスコントロール
		```
		// マウスコントロール
		controls = new THREE.OrbitControls(camera, canvas);
		controls.addEventListener("change", render);

		function render(){
			renderer.render(scene, camera);
		}
		```

		> THREE.OrbitControls(object, domElement)  
		> [Github - OrbitControls.js](https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js)

		domElementの方にレンダリングする要素を指定することで、その領域だけでマウスコントロールを実行することができる。

		| Property | Type | Desc |
		|:-----------|:------------|:------------|
		| userZoom | Boolean | ズーム操作 |
		| userZoomSpeed | Number | ズーム速度 |
		| userRotate | Boolean | 回転操作 |
		| userRotateSpeed | Number | 回転速度|
		| userPan | Boolean | パン操作 |
		| userPanSpeed | Number | パン速度 |
		| autoRotate | Boolean | 自動回転 |
		| autoRotateSpeed | Number | 自動回転速度 |
		| minPolarAngle | Number | 最小角度 |
		| maxPolarAngle | Number | 最大角度 |
		| minDistance | Number | 近づける距離の最小値 |
		| maxDistance | Infinity | 遠ざかれる距離の最大値 |

		---

		### アニメーション
		```
		animate();
		function animate(){
			requestAnimationFrame(animate);
			controls.update();
		}
		```

		---

		### All Codes
		```
		window.addEventListener("DOMContentLoaded", function(){
			var requestAnimationFrame = window.requestAnimationFrame ||
																	window.mozRequestAnimationFrame ||
																	window.webkitRequestAnimationFrame ||
																	window.msRequestAnimationFrame;
			window.requestAnimationFrame = requestAnimationFrame;

			var camera,controls,scene,cubeMesh,renderer,controls;
			var canvas = document.getElementById("canvas");

			init();
			animate();

			function init(){
				// カメラを用意
				var geometry,material,pointLight,lighthelper,
						width  = canvas.clientWidth,
						height = window.innerHeight;
						
				camera = new THREE.PerspectiveCamera(45, width/height, 1, 2000);
				camera.position.set(0, 0, 100);

				// シーンの準備
				scene = new THREE.Scene();

				controls = new THREE.OrbitControls(camera, canvas);
				controls.addEventListener("change", render);

				// ジオメトリーの作成
				geometry = new THREE.BoxGeometry(10, 10, 10);

				// マテリアルの作成
				material = new THREE.MeshLambertMaterial({color: 0x660000});

				// メッシュの作成
				cubeMesh = new THREE.Mesh(geometry, material);
				cubeMesh.rotation.x = 2;
				scene.add(cubeMesh);

				// 光源の作成
				pointLight = new THREE.PointLight(0xffffff, 2, 0);
				pointLight.position.set(10, 10, 30);
				scene.add(pointLight);
				lighthelper = new THREE.PointLightHelper(pointLight, 1);
				scene.add(lighthelper);

				// レンダラーを用意
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				canvas.appendChild( renderer.domElement );
				renderer.render(scene, camera);
			}

			function animate(){
				requestAnimationFrame(animate);
				controls.update();
			}

			function render(){
				renderer.render(scene, camera);
			}
		});
		```