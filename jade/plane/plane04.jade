include ./../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs Plane Sample04

block content
	h1 ゆらゆらさせる
	
	mixin list(1)

	div#canvas

	include ../inc/_script-sets.jade
	script.

		window.addEventListener("DOMContentLoaded", function(){
			var requestAnimationFrame = window.requestAnimationFrame ||
																	window.mozRequestAnimationFrame ||
																	window.webkitRequestAnimationFrame ||
																	window.msRequestAnimationFrame;
			window.requestAnimationFrame = requestAnimationFrame;

			var camera,scene,geometry,material,mesh,renderer,texture;
			var canvas = document.getElementById("canvas"),
					width = canvas.clientWidth, height = window.innerHeight,
					startData = new Date();

			init();
			animation();

			function init(){
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(45, width/height, 1, 1000);
				camera.position.set(0, 10, 200);
				camera.lookAt(new THREE.Vector3(0, 0, 0));

				texture = THREE.ImageUtils.loadTexture("plane02.png");
				geometry = new THREE.PlaneGeometry(100, 100, 64, 64);
				material = new THREE.MeshBasicMaterial({ map: texture });
				mesh = new THREE.Mesh(geometry, material);
				scene.add(mesh);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				renderer.setClearColor(0xABABAB);
				canvas.appendChild(renderer.domElement);
			}

			function animation(){
				requestAnimationFrame(animation);

				var time = (new Date() - startData)/1000;
				mesh.geometry.verticesNeedUpdate = true;
				for (var i=0;i<mesh.geometry.vertices.length;i++) {
					vertex = mesh.geometry.vertices[i].z = 2 * Math.sin( -i/2 + time*10 );
				}
				renderer.render(scene, camera);
			}
		});


	:markdown
		### メッシュ
		```
		texture = THREE.ImageUtils.loadTexture("plane02.png");// 画像の読み込み読み込み
		geometry = new THREE.PlaneGeometry(100, 100, 64, 64);// ジオメトリー
		material = new THREE.MeshBasicMaterial({ map: texture });// マテリアル
		mesh = new THREE.Mesh(geometry, material);// メッシュ
		scene.add(mesh);// シーンに追加
		```

		> THREE.ImageUtils  
		> [docs - ImageUtils](http://threejs.org/docs/#Reference/Extras/ImageUtils)

		> THREE.PlaneGeometry(width, height, widthSegments, heightSegments)  
		> [docs - PlaneGeometry](http://threejs.org/docs/#Reference/Extras.Geometries/PlaneGeometry)

		---

		### アニメーション
		```
		var startData = new Date();
		animation();
		function animation(){
			requestAnimationFrame(animation);

			var time = (new Date() - startData)/1000;// 時間の差分1000分の1を取得
			mesh.geometry.verticesNeedUpdate = true;// 値の更新をtrueに

			// 頂点分ループし、z軸の値を更新
			for (var i=0;i<mesh.geometry.vertices.length;i++) {
				vertex = mesh.geometry.vertices[i].z = 2 * Math.sin( -i/2 + time*10 );
			}
			renderer.render(scene, camera);
		}
		```

		#### 頂点値の更新
		頂点数分ループし、z軸の値を更新している。  
		頂点の更新は`Geometry.verticesNeedUpdate`を使い設定しなくてはならない。

		> [docs - Geometry](http://threejs.org/docs/#Reference/Core/Geometry)

		---

		### All Codes
		```
		window.addEventListener("DOMContentLoaded", function(){
			var requestAnimationFrame = window.requestAnimationFrame ||
																	window.mozRequestAnimationFrame ||
																	window.webkitRequestAnimationFrame ||
																	window.msRequestAnimationFrame;
			window.requestAnimationFrame = requestAnimationFrame;

			var camera,scene,geometry,material,mesh,renderer,texture;
			var canvas = document.getElementById("canvas"),
					width = canvas.clientWidth, height = window.innerHeight,
					startData = new Date();

			init();
			animation();

			function init(){
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(45, width/height, 1, 1000);
				camera.position.set(0, 10, 200);
				camera.lookAt(new THREE.Vector3(0, 0, 0));

				texture = THREE.ImageUtils.loadTexture("plane02.png");
				geometry = new THREE.PlaneGeometry(100, 100, 64, 64);
				material = new THREE.MeshBasicMaterial({ map: texture });
				mesh = new THREE.Mesh(geometry, material);
				scene.add(mesh);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				renderer.setClearColor(0xABABAB);
				canvas.appendChild(renderer.domElement);
			}

			function animation(){
				requestAnimationFrame(animation);

				var time = (new Date() - startData)/1000;
				mesh.geometry.verticesNeedUpdate = true;
				for (var i=0;i<mesh.geometry.vertices.length;i++) {
					vertex = mesh.geometry.vertices[i].z = 2 * Math.sin( -i/2 + time*10 );
				}
				renderer.render(scene, camera);
			}
		});
		```
