include ./../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs Plane Sample03

block content
	h1 地面を凸凹にする
	
	mixin list(1)

	div#canvas

	include ../inc/_script-sets.jade
	script.
		var requestAnimationFrame = window.requestAnimationFrame ||
																window.mozRequestAnimationFrame ||
																window.webkitRequestAnimationFrame ||
																window.msRequestAnimationFrame;
		window.requestAnimationFrame = requestAnimationFrame;

		window.addEventListener("DOMContentLoaded", function(){
			var scene,camera,geometry,texture,material,mesh,renderer;

			init();
			animation();

			function init(){
				var canvas = document.getElementById("canvas");
				var width = canvas.clientWidth, height = window.innerHeight;

				/*
				 * シーンの作成
				*/
				scene = new THREE.Scene();
				scene.fog = new THREE.FogExp2(0xABABAB, 0.008);

				/*
				 * カメラの設定
				*/
				camera = new THREE.PerspectiveCamera(45, width/height, 1, 1000);
				camera.position.set(0, 10, 100);
				camera.lookAt(new THREE.Vector3(0,0,0));

				/*
				 * メッシュの作成
				*/
				// ジオメトリーの作成
				geometry = new THREE.PlaneGeometry(200, 200, 16, 16);

				// ジオメトリの頂点分ループし、z方向の値を変更する
				for(var i = 0;i < geometry.vertices.length;i++){
					geometry.vertices[i].z = Math.random() * 5 - 5;
				}

				// 画像の読み込み
				texture = THREE.ImageUtils.loadTexture("plane02.png", {}, function(){renderer.render(scene, camera);});

				// マテリアルの作成
				material = new THREE.MeshBasicMaterial({map: texture});
				mesh = new THREE.Mesh(geometry, material);
				mesh.rotation.x = Math.PI / -2;
				scene.add(mesh);

				/*
				 * レンダラーの作成
				*/
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				renderer.setClearColor(0xABABAB);
				canvas.appendChild(renderer.domElement);
				renderer.render(scene, camera);
			}

			function animation(){
				requestAnimationFrame(animation);
				var timer = Date.now();
				camera.position.x = 50 * Math.sin( timer / 100 * Math.PI / 360 );
				camera.position.z = 50 * Math.cos( timer / 100 * Math.PI / 360 );
				camera.lookAt( scene.position );
				renderer.render(scene, camera);
			}
		});


	:markdown
		### メッシュ
		```
		// ジオメトリーの作成
		var geometry,map1,material,mesh;
		geometry = new THREE.PlaneGeometry(200, 200, 64, 64);

		// 画像を読み込み 画像が読み込まれる前に描画されている？ため上手く読み込めない。renderer.render()を走らせる
		map1 = THREE.ImageUtils.loadTexture("plane02.png", {}, function() {renderer.render(scene, camera);});
		material = new THREE.MeshBasicMaterial({map: map1});// マテリアルの作成
		mesh = new THREE.Mesh(geometry, material);
		mesh.rotation.x = Math.PI / -2;// x軸を90度回転
		scene.add(mesh);
		```

		地面の作成  
		> PlaneGeometry(width, height, widthSegments, heightSegments)  
		> (docs - PlaneGeometry)[http://threejs.org/docs/#Reference/Extras.Geometries/PlaneGeometry]

		画像の読み込み  
		> Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )  
		> (docs - Texture)[http://threejs.org/docs/#Reference/Textures/Texture]

		#### 地面のz方向の値を変更し凸凹にする
		```
		// ジオメトリの頂点分ループし、z方向の値を変更する
		for(var i = 0;i < geometry.vertices.length;i++){
			geometry.vertices[i].z = Math.random() * 5 - 5;
		}
		```

		---

		### 遠くをぼかす
		> FogExp2( hex, density)  
		> [docs - FogExp2](http://threejs.org/docs/#Reference/Scenes/FogExp2)

		```
		scene.fog = new THREE.FogExp2( 0xABABAB, 0.008 );// ぼかす
		```

		---

		### アニメーション
		```
		animation();
		function animation(){
			requestAnimationFrame(animation);
			var timer = Date.now();
			camera.position.x = 50 * Math.sin( timer / 100 * Math.PI / 360 );
			camera.position.z = 50 * Math.cos( timer / 100 * Math.PI / 360 );
			camera.lookAt( scene.position );
			renderer.render(scene, camera);
		}
		```

		---

		### All Codes
		```
		window.addEventListener("DOMContentLoaded", function(){
			var scene,camera,geometry,texture,material,mesh,renderer;

			init();
			animation();

			function init(){
				var canvas = document.getElementById("canvas");
				var width = canvas.clientWidth, height = window.innerHeight;

				/*
				 * シーンの作成
				*/
				scene = new THREE.Scene();
				scene.fog = new THREE.FogExp2(0xABABAB, 0.008);

				/*
				 * カメラの設定
				*/
				camera = new THREE.PerspectiveCamera(45, width/height, 1, 1000);
				camera.position.set(0, 10, 100);
				camera.lookAt(new THREE.Vector3(0,0,0));

				/*
				 * メッシュの作成
				*/
				// ジオメトリーの作成
				geometry = new THREE.PlaneGeometry(200, 200, 16, 16);

				// ジオメトリの頂点分ループし、z方向の値を変更する
				for(var i = 0;i < geometry.vertices.length;i++){
					geometry.vertices[i].z = Math.random() * 5 - 5;
				}

				// 画像の読み込み
				texture = THREE.ImageUtils.loadTexture("plane02.png", {}, function(){renderer.render(scene, camera);});

				// マテリアルの作成
				material = new THREE.MeshBasicMaterial({map: texture});
				mesh = new THREE.Mesh(geometry, material);
				mesh.rotation.x = Math.PI / -2;
				scene.add(mesh);

				/*
				 * レンダラーの作成
				*/
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(width, height);
				renderer.setClearColor(0xABABAB);
				canvas.appendChild(renderer.domElement);
				renderer.render(scene, camera);
			}

			function animation(){
				requestAnimationFrame(animation);
				var timer = Date.now();
				camera.position.x = 50 * Math.sin( timer / 100 * Math.PI / 360 );
				camera.position.z = 50 * Math.cos( timer / 100 * Math.PI / 360 );
				camera.lookAt( scene.position );
				renderer.render(scene, camera);
			}
		});
		```
