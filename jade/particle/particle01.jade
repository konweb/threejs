include ./../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs particle01 Sample

block content
	h1 パーティクル

	mixin list(1)

	script(src="../common/threejs/build/three.min.js")
	script
		:coffee
			requestAnimationFrame = window.requestAnimationFrame ||
															window.mozRequestAnimationFrame ||
															window.webkitRequestAnimationFrame ||
															window.msRequestAnimationFrame
			window.requestAnimationFrame = requestAnimationFrame
			
			window.addEventListener "DOMContentLoaded", ->
				Webgl.init()
				Webgl.animation()

			class Webgl
				@init = ->
					@width = window.innerWidth
					@height = window.innerHeight

					@initCamera()
					@createScene()
					#@helper()
					@initMaterial()
					@renderFun()
					
					window.addEventListener "resize", @resize.bind this, false

				###
				 * カメラの設定
				###
				@initCamera = ->
					fov = 60
					aspect = @width / @height
					near = 1
					fav = 1000

					@camera = new THREE.PerspectiveCamera fov, aspect, near, fav
					@camera.position.set 50, 50, 500
					@camera.up.set 0, 0, 1
					@camera.lookAt {x:0, y:0, z: 0}

				###
				 * シーンの作成
				###
				@createScene = ->
					@scene = new THREE.Scene

				###
				 * ヘルパー
				###
				@helper = ->
					axis = new THREE.AxisHelper 5000
					axis.position.set 0, 0, 0
					@scene.add axis

				###
				 * メッシュの作成
				###
				@initMaterial = ->
					#ジオメトリーの作成
					geometry = new THREE.Geometry

					count = 1000
					colors = []
					for i in [0...count]
						vertex = new THREE.Vector3();
						vertex.x = Math.random() * 900 - 450;
						vertex.y = Math.random() * 900 - 450;
						vertex.z = Math.random() * 900 - 450;
						geometry.vertices.push vertex

					@parameters = [
						[ [1, 1, 0.5], 5 ],
						[ [0.95, 1, 0.5], 4 ],
						[ [0.90, 1, 0.5], 3 ],
						[ [0.85, 1, 0.5], 2 ],
						[ [0.80, 1, 0.5], 1 ]
					];
					
					@materials = []
					for v,i in @parameters
						color = @parameters[i][0];
						size  = @parameters[i][1];

						@materials[i] = new THREE.PointCloudMaterial size: size
						###
						time = Date.now() * 0.00005
						h = ( 360 * ( color[0] + time ) % 360 ) / 360
						@materials[i].color.setHSL( h, color[1], color[2] )
						###
						particles = new THREE.PointCloud geometry, @materials[i]
						particles.rotation.x = Math.random() * 6;
						particles.rotation.y = Math.random() * 6;
						particles.rotation.z = Math.random() * 6;

						@scene.add( particles );

					###
					@materials = new THREE.PointCloudMaterial size: 4
					particles = new THREE.PointCloud geometry, @materials
					@scene.add( particles );
					###

				###
				 * レンダラーの作成
				###
				@renderFun = ->
					@renderer = new THREE.WebGLRenderer
					@renderer.setSize @width, @height
					#@renderer.setClearColor 0xeeeeee
					document.body.appendChild @renderer.domElement
					@renderer.render @scene, @camera
				
				###
				 * アニメーション
				###
				@animation = ->
					requestAnimationFrame @animation.bind this

					#@camera.position.x += @camera.position.x * 0.005
					#@camera.position.y += @camera.position.y * 0.005
					#@camera.lookAt @scene.position
					
					###
					 * シーンの子オブジェクトすべての位置更新
					###
					time = Date.now() * 0.00005
					for v,k in @scene.children
						object = @scene.children[k]
						if object instanceof THREE.PointCloud
							object.rotation.y = time * ( k < 4 ? k + 1 : - ( k + 1 ) )

					###
					 * シーンの子オブジェクトすべての位置更新
					###
					for v,j in @materials
						color = @parameters[j][0];
						h = ( 360 * ( color[0] + time ) % 360 ) / 360;
						@materials[j].color.setHSL( h, color[1], color[2] );

					@renderer.render @scene, @camera

				@resize = ->
					@camera.aspect = window.innerWidth / window.innerHeight
					@camera.updateProjectionMatrix()
					@renderer.setSize window.innerWidth, window.innerHeight