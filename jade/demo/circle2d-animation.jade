include ./../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs circle01 Sample

block content
	h1 複数円(2D)の描画

	mixin list(1)

	include ../inc/_script-sets.jade
	script.
		var requestAnimationFrame = window.requestAnimationFrame ||
																window.mozRequestAnimationFrame ||
																window.webkitRequestAnimationFrame ||
																window.msRequestAnimationFrame;
		window.requestAnimationFrame = requestAnimationFrame;


		window.addEventListener("DOMContentLoaded", function(){
			var camera,scene,group,particle,renderer,material;
			var col = 20,
					margin = 100,
					opacity = 0.5,
					flag = "large",
					count = 0,
					width = window.innerWidth,
					height = window.innerHeight;

			init();
			animate();

			setInterval(function(){
				count++;
				console.log("setInterval");
				console.log(count);
				//- scene.remove(group);
				//- group.children.length = 0;
				//- group.remove(particle);
				//- cancelAnimationFrame(animate);
				//- createMaterial(count);
				//- geometry.dispose();
				//- material.dispose();
				if(count === 4) count = 0;
			},3000);

			function init(){
				/*
				 * カメラの準備
				 * THREE.PerspectiveCamra(画角, 画面比, クリッピング手前, クリッピング奥);
				*/
				var fov = 80,
						aspect = width / height,
						near = 1,
						far = 1000;

				camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
				camera.position.z = 500;

				/*
				 * シーンの作成
				*/
				group = new THREE.Object3D();
				scene = new THREE.Scene();
				scene.add(group);

				createMaterial();

				/*
				 * レンダラーの作成
				*/
				renderer = new THREE.CanvasRenderer();
				renderer.setPixelRatio(window.devicePixelRatio);
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColorHex(0xe4bbf9, 0.7);
				document.body.appendChild(renderer.domElement);
				renderer.render(scene, camera);
			}

			function program(context){
				var PI2 = Math.PI * 2,
						radius = 10.0,
						reduce = 0.7;

				context.beginPath();
				context.arc( 0, 0, radius, 0, PI2, true );
				context.closePath();
				context.arc( 10, 10, radius * reduce, 0, PI2, true );
				context.closePath();
				context.arc( -10, 10, radius * reduce, 0, PI2, true );
				context.closePath();
				context.fill();
			}

			function createMaterial(count){
				console.log(width);
				/*
				 * マテリアルの作成
				*/
				for(var i = 0;i < 300 * col;i++){
					material = new THREE.SpriteCanvasMaterial( {
						color: Math.random() * 0x808008 + 0x808080,
						program: program
					});
					particle = new THREE.Sprite(material);
					particle.position.x = Number("-" + width / 2);
					particle.position.y = height / 2;
					//- particle.position.x = (Math.random() * width) -500;
					//- particle.position.y = (Math.random() * width) -500;
					//- particle.position.z = Math.random() * 50;
					group.add(particle);
				}

				for(var i = 0; i < 300; i++){
					for(var j = 0;j < col;j++){
						if(j % 2 == 0){
							group.children[i*col+j].position.x += i * margin;
						}else{
							group.children[i*col+j].position.x += (i * margin) + (margin / 2);
						}
						group.children[i*col+j].position.y -= j * margin;
						group.children[i*col+j].material.opacity = opacity;
					}
				}
				console.log(group);
				scene.add(group);
			}

			function animate(){
				//- cancelAnimationFrame(animate);
				requestAnimationFrame(animate);
				if(group.children[0].scale.x > 3){
					flag = "small";
				}else if(group.children[0].scale.x < 0.1){
					flag = "large";
				}
				render();
			}

			function render(){
				var r = 0.3;
				group.children.map(function(val, i){
					//- if(flag === "large"){
					//- 	val.scale.x += r;
					//- 	val.scale.y += r;
					//- }else{
					//- 	val.scale.x -= r;
					//- 	val.scale.y -= r;
					//- }
					//- console.log(count);
					if(count === 0){
						val.position.x += r;
						val.position.y += r;
					}else if(count === 1){
						val.position.x += r;
						val.position.y -= r;
					}else if(count === 2){
						val.position.x -= r;
						val.position.y -= r;
					}else{
						val.position.x -= r;
						val.position.y += r;
					}
					return val;
				});
				renderer.render(scene, camera);
			}
		});
