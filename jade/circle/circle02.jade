include ./../inc/_nav-list.jade
extends ../inc/_head.jade

block title
	title Threejs circle01 Sample

block content
	h1 複数円(2D)の描画

	mixin list(1)

	script(src="../common/threejs/build/three.min.js")
	script(src="../common/lib/ParticleCanvasMaterial.js")
	//- script(src="../common/lib/CanvasRenderer.js")
	//- script(src="../common/lib/Projector.js")
	script.
		var requestAnimationFrame = window.requestAnimationFrame ||
																window.mozRequestAnimationFrame ||
																window.webkitRequestAnimationFrame ||
																window.msRequestAnimationFrame;
		window.requestAnimationFrame = requestAnimationFrame;



		window.addEventListener("DOMContentLoaded", function(){
			var camera,scene,group,particle,renderer;

			init();
			animate();

			function init(){
				/*
				 * カメラの準備
				 * THREE.PerspectiveCamra(画角, 画面比, クリッピング手前, クリッピング奥);
				*/
				var width = window.innerWidth,
						height = window.innerHeight,
						fov = 80,
						aspect = width / height,
						near = 1,
						far = 1000,

				camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
				camera.position.z = 500;

				/*
				 * シーンの作成
				*/
				scene = new THREE.Scene();

				var PI2 = Math.PI * 2;
				var program = function ( context ) {
					context.beginPath();
					context.arc( 0, 0, 10.0, 0, PI2, true );
					context.fill();
				}

				group = new THREE.Group();
				scene.add( group );

				/*
				 * マテリアルの作成
				*/
				for ( var i = 0; i < 9; i++ ) {
					var material = new THREE.ParticleCanvasMaterial( {
						color: Math.random() * 0x808008 + 0x808080,
						program: program
					} );

					particle = new THREE.Sprite( material );
					//- particle.position.x = Math.random() * 2000 - 1000;
					//- particle.position.y = Math.random() * 2000 - 1000;
					//- particle.position.z = Math.random() * 2000 - 1000;
					//- particle.scale.x = particle.scale.y = Math.random() * 20 + 10;
					if(i === 0){
						particle.position.x = 0;
					}else if(i % 2 == 0){
						particle.position.x = -30 * i;
					}else{
						particle.position.x = 30 * i;
					}
					console.log(particle.position.x);
					//- particle.position.y = 10 * i;
					particle.position.z = 0;
					group.add( particle );
				}

				/*
				 * レンダラーの作成
				*/
				renderer = new THREE.CanvasRenderer();
				//- renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild(renderer.domElement);
				renderer.render(scene, camera);
			}

			function animate(){
				requestAnimationFrame(animate);
				render();
			}

			function render(){
			//- 	particle.position.x++;
				renderer.render(scene, camera);
			}
		});
