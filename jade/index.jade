include ./inc/_nav-list.jade
extends ./inc/_head.jade

block title
	title Threejs

block css
	link(rel="stylesheet", href="./css/marx.min.css")
	link(rel="stylesheet", href="http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css")
	link(rel="stylesheet", href="./css/style.css")

block content
	h1 Threejs

	mixin list(0)

	div#canvas

	- var path = "root"
	include ./inc/_script-sets.jade
	script.
		window.addEventListener("DOMContentLoaded", function(){
			var canvas = document.getElementById("canvas");

			/* カメラを用意
			 * THREE.PerspectiveCamera(画角, 縦横比, クリッピング手前, クリッピング奥);
			 * クリッピング手前からクリッピング奥までが描画される
			*/
			var width  = canvas.clientWidth,
					height = window.innerHeight,
					fov    = 45,
					aspect = width / height,
					near   = 1,
					far    = 1000,
					camera = new THREE.PerspectiveCamera(fov, aspect, near, far);

			// z方向に500ずらす
			camera.position.set(0, 0, 500);
			camera.up.set(0, 0, 1);
			camera.lookAt(new THREE.Vector3(0, 0, 0));

			/* シーンの準備
			 * シーンは空間
			 * ここに様々なオブジェクトを詰め込んでいく
			*/
			var scene = new THREE.Scene();

			/* メッシュを作成
			 * メッシュはポリゴンの集合で作られたオブジェクト
			 * メッシュはジオメトリー(座標)とマテリアル(素材)で構成される
			*/

			// ジオメトリーの作成
			// THREE.BoxGeometry(横幅, 高さ, 奥行き, (横の分割数, 縦の分割数, 奥行きの分割数, 表面, sides));
			var geometry = new THREE.BoxGeometry(100, 100, 100);

			// マテリアルの作成
			// THREE.MeshLambertMaterial({object});
			var material = new THREE.MeshLambertMaterial({color: 0x660000});

			// メッシュの作成
			var cubeMesh = new THREE.Mesh(geometry, material);
			cubeMesh.rotation.x = 2;


			/* メッシュをシーンに追加
			 * 作成したメッシュをシーンに追加するには、シーン.add(メッシュ)を使う
			*/
			scene.add(cubeMesh);

			/*
			 * 光源の作成
			*/
			var directionalLight = new THREE.DirectionalLight(0xffffff, 3);
			directionalLight.position.z = 3;

			/*
			 * 光源をシーンに追加
			 * メッシュの時と同様に、シーン.add(光源)で追加する
			*/
			scene.add(directionalLight);


			/* レンダラーを用意
			 * 実際に描画を行うための処理
			*/
			var renderer = new THREE.WebGLRenderer();

			// 大きさの定義
			// レンダラー.setSize(横幅, 高さ)で大きさを定義
			renderer.setSize(width, height);

			// DOMにcanvasを追加
			canvas.appendChild( renderer.domElement );


			/* レンダリング
			 * 描画処理
			 * レンダラー.render(シーン, カメラ)
			*/
			renderer.render(scene, camera);
		});

	:markdown
		## 基本的な使い方

		### 読み込み後に実行
		```
		window.addEventListener("DOMContentLoaded", function(){
			処理
		});
		```

		### 大まかな流れ
		- カメラ設定
		- シーンの作成
		- オブジェクトの作成
		- 光源の作成
		- 作成したオブジェクトや光源をシーンに追加
		- レンダリング

		---

		### カメラの設定
		```
		/* カメラを用意
		 * THREE.PerspectiveCamera(画角, 縦横比, クリッピング手前, クリッピング奥);
		 * クリッピング手前からクリッピング奥までが描画される
		*/
		var width  = document.body.clientWidth,
				height = window.innerHeight,
				fov    = 45,
				aspect = width / height,
				near   = 1,
				far    = 1000,
				camera = new THREE.PerspectiveCamera(fov, aspect, near, far);

		camera.position.set(50, 50, 200);// カメラの位置座標
		camera.up.set(0, 0, 1);// カメラの上方向の設定
		camera.lookAt({x: 0, y: 0, z: 0});// カメラの視野の中心
		```

		> THREE.PerspectiveCamera(画角, 縦横比, クリッピング手前, クリッピング奥);  
		> [docs - PerspectiveCamera](http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera)  

		| カメラ | 意味 |
		|:-----------|:------------|
		| camera.position | カメラの位置座標 |
		| camera.up | カメラの上方向の設定 |
		| camera.lookAt | カメラの視野の中心 |

		---

		### シーンの作成
		* ここに様々なオブジェクトを詰め込んでいく

		```
		var scene = new THREE.Scene();
		```

		> [docs - Scene](http://threejs.org/docs/#Reference/Scenes/Scene)

		---

		### メッシュの作成
		* メッシュはポリゴンの集合で作られたオブジェクト
		* メッシュはジオメトリー(座標)とマテリアル(素材)で構成される

		```
		// ジオメトリーの作成
		var geometry = new THREE.BoxGeometry(100, 100, 100);

		// マテリアルの作成
		var material = new THREE.MeshLambertMaterial({color: 0x660000});

		// メッシュの作成
		var cubeMesh = new THREE.Mesh(geometry, material);
		cubeMesh.rotation.x = 2;

		// シーンに追加
		scene.add(cubeMesh);
		```

		> THREE.BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)  
		> [docs - BoxGeometry](http://threejs.org/docs/#Reference/Extras.Geometries/BoxGeometry)

		> THREE.MeshLambertMaterial(parameters);  
		> [docs - MeshLambertMaterial](http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial)

		> THREE.Mesh(geometry, material);  
		> [Mesh](http://threejs.org/docs/#Reference/Objects/Mesh)
		
		---

		### 光源の作成
		```
		// 光源の作成
		var directionalLight = new THREE.DirectionalLight(0xffffff, 3);
		directionalLight.position.z = 3;

		// シーンに追加
		scene.add(directionalLight);
		```
		
		> THREE.DirectionalLight(hex, intensity)  
		>	[docs - DirectionalLight](http://threejs.org/docs/#Reference/Lights/DirectionalLight)

		---

		### レンダラーの作成
		```
		/* 
		 * レンダラーの作成
		*/
		var renderer = new THREE.WebGLRenderer();
		renderer.setSize( width, height);// 大きさの設定
		var canvas = document.getElementById("canvas");
		canvas.appendChild( renderer.domElement );
		renderer.render(scene, camera);// レンダリング
		```

		> THREE.WebGLRenderer( parameters )  
		> [docs - WebGLRenderer](http://threejs.org/docs/#Reference/Renderers/WebGLRenderer)

		---

		### All Codes
		```
		window.addEventListener("DOMContentLoaded", function(){
			var canvas = document.getElementById("canvas");

			/* カメラを用意
			 * THREE.PerspectiveCamera(画角, 縦横比, クリッピング手前, クリッピング奥);
			 * クリッピング手前からクリッピング奥までが描画される
			*/
			var width  = canvas.clientWidth,
					height = window.innerHeight,
					fov    = 45,
					aspect = width / height,
					near   = 1,
					far    = 1000,
					camera = new THREE.PerspectiveCamera(fov, aspect, near, far);

			// z方向に500ずらす
			camera.position.set(0, 0, 500);
			camera.up.set(0, 0, 1);
			camera.lookAt(new THREE.Vector3(0, 0, 0));

			/* シーンの準備
			 * シーンは空間
			 * ここに様々なオブジェクトを詰め込んでいく
			*/
			var scene = new THREE.Scene();

			/* メッシュを作成
			 * メッシュはポリゴンの集合で作られたオブジェクト
			 * メッシュはジオメトリー(座標)とマテリアル(素材)で構成される
			*/

			// ジオメトリーの作成
			// THREE.BoxGeometry(横幅, 高さ, 奥行き, (横の分割数, 縦の分割数, 奥行きの分割数, 表面, sides));
			var geometry = new THREE.BoxGeometry(100, 100, 100);

			// マテリアルの作成
			// THREE.MeshLambertMaterial({object});
			var material = new THREE.MeshLambertMaterial({color: 0x660000});

			// メッシュの作成
			var cubeMesh = new THREE.Mesh(geometry, material);
			cubeMesh.rotation.x = 2;


			/* メッシュをシーンに追加
			 * 作成したメッシュをシーンに追加するには、シーン.add(メッシュ)を使う
			*/
			scene.add(cubeMesh);

			/*
			 * 光源の作成
			*/
			var directionalLight = new THREE.DirectionalLight(0xffffff, 3);
			directionalLight.position.z = 3;

			/*
			 * 光源をシーンに追加
			 * メッシュの時と同様に、シーン.add(光源)で追加する
			*/
			scene.add(directionalLight);


			/* レンダラーを用意
			 * 実際に描画を行うための処理
			*/
			var renderer = new THREE.WebGLRenderer();

			// 大きさの定義
			// レンダラー.setSize(横幅, 高さ)で大きさを定義
			renderer.setSize(width, height);

			// DOMにcanvasを追加
			canvas.appendChild( renderer.domElement );


			/* レンダリング
			 * 描画処理
			 * レンダラー.render(シーン, カメラ)
			*/
			renderer.render(scene, camera);
		});
		```